{
	"info": {
		"_postman_id": "95ea0e39-0fc9-4d2e-9c6b-f4924ef7bb9d",
		"name": "WAVE Server REST API Tests copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Read Available Tests",
			"item": [
				{
					"name": "Read Available Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f4b465d-61f4-48c5-ad1d-d765f2741160",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var availableTests = pm.response.json();",
									"",
									"pm.test(\"JSON structure is as expected\", function () {",
									"    pm.expect(typeof availableTests).to.equal(\"object\");",
									"    for (var api of Object.keys(availableTests)) {",
									"        pm.expect(availableTests[api]).to.be.an.instanceof(Array);",
									"        var apiRegExp = new RegExp(\"^/\" + api, \"i\");",
									"        for (var test of availableTests[api]) {",
									"            pm.expect(test).to.match(apiRegExp);",
									"        }",
									"    }",
									"});",
									"",
									"var includedTests = [];",
									"var excludedTests = [];",
									"var specialTimeoutTest = \"\";",
									"",
									"var apis = Object.keys(availableTests);",
									"for(var api of apis) {",
									"    if (availableTests[api].length > 50) {",
									"        var subDirs = availableTests[api].map(test => test.split(\"/\").filter(part => !!part).join(\"/\").split(\"/\")[1]).reduce((acc, curr) => acc.indexOf(curr) === -1 ? acc.concat([curr]) : acc, []);",
									"        if (subDirs.length > 2) {",
									"            includedTests.push(\"/\" + api);",
									"            excludedTests.push(\"/\" + api + \"/\" + subDirs[0]);",
									"            specialTimeoutTest = availableTests[api][availableTests[api].length - 1];",
									"            break;",
									"        }",
									"        ",
									"    }",
									"}",
									"",
									"pm.globals.set(\"available_tests\", availableTests);",
									"pm.globals.set(\"included_tests\", JSON.stringify(includedTests));",
									"pm.globals.set(\"excluded_tests\", JSON.stringify(excludedTests));",
									"pm.globals.set(\"special_timeout_test\", specialTimeoutTest.replace(\".\", \"\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"tests"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create and Read Sessions",
			"item": [
				{
					"name": "Start expiring session remove expiration date",
					"item": [
						{
							"name": "Create Session With Expiration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c4fbcf4-802f-4f57-8b4d-a388b7af8f05",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "243cfd7c-06e2-451e-a51d-611b207befea",
										"exec": [
											"var expirationDate = Date.now() + 10000;",
											"pm.globals.set(\"expiration_date\", expirationDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"expiration_date\": {{expiration_date}}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7eba6173-829c-4a2b-a36f-a4262d77542a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"JSON structure contains expiration date\", function () {",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"});",
											"",
											"var expirationDate = pm.globals.get(\"expiration_date\");",
											"",
											"pm.test(\"Expiration date is as specified\", function () {",
											"    pm.expect(Date.parse(jsonData.expiration_date)).to.equal(expirationDate);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1abc564-340f-468d-bcea-6bfbf14dcaba",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25003b7a-2b12-4abf-961f-5aae9b100670",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"JSON structure contains expiration date\", function () {",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"});",
											"",
											"pm.test(\"Expiration date is null\", function () {",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Read Public Sessions",
			"item": [
				{
					"name": "Read Public Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ae2acc8-4688-408b-a41b-cbdd9610ac0b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON Array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an.instanceof(Array);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/public",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"public"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Find Session",
			"item": [
				{
					"name": "Create Session No Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "344d6aa0-85e5-437a-afa7-cf8dc03b76bc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
									"",
									"pm.test(\"Responds with token in JSON format\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(jsonData.token).to.match(tokenRegex);",
									"});",
									"",
									"",
									"const response = pm.response.json();",
									"const token = response.token;",
									"pm.globals.set(\"session_token\", token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Session Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "76e41316-3cc1-4532-b665-b6038ec9465c",
								"exec": [
									"const token = pm.globals.get(\"session_token\");",
									"pm.globals.set(\"session_token_fragment\", token.split(\"-\").shift());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b1dacc6-5edb-42ed-b00c-1f19f573a467",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const sessionToken = pm.globals.get(\"session_token\");",
									"",
									"pm.test(\"Found token is original token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.equal(sessionToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token_fragment}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token_fragment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean Up",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Session Too Short Fragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b04327c7-216b-483f-9f0c-0c7990073b53",
								"exec": [
									"const token = pm.globals.get(\"session_token\");",
									"pm.globals.set(\"session_token_fragment\", token.split(\"-\").shift());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b74c11dd-c3d4-45a9-8487-2144764b418d",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/1234567",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"1234567"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Read Next Test",
			"item": [
				{
					"name": "Clean Up",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Next Test of Invalid Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "354ab0a2-3011-4b74-ae53-7a67aea51704",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/next",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"tests",
								"{{session_token}}",
								"next"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Session \\w Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c67ad5f-991f-4a18-b25f-e76680402eb9",
								"exec": [
									"const response = pm.response.json();",
									"const token = response.token;",
									"pm.globals.set(\"session_token\", token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c3a34aa-585a-431b-9875-49835c5c09e8",
								"exec": [
									"var automaticTimeout = 120000;",
									"var manualTimeout = 1000000;",
									"var specialTimeout = 2000;",
									"",
									"pm.globals.set(\"automatic_timeout\", automaticTimeout);",
									"pm.globals.set(\"manual_timeout\", manualTimeout);",
									"pm.globals.set(\"special_timeout\", specialTimeout);",
									"",
									"const availableTests = pm.globals.get(\"available_tests\");",
									"const test1 = availableTests[Object.keys(availableTests)[0]][0];",
									"",
									"pm.globals.set(\"single_test_1\", test1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tests\": {\n        \"include\": [\"{{single_test_1}}\"]\n    },\n    \"types\": [\n        \"automatic\"\n    ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Next Test of Pending Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c15f5c6-3a54-4dfc-a767-bc727b122616",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const nextTest = jsonData.next_test;",
									"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
									"",
									"const web_root = pm.environment.get(\"web_root\");",
									"",
									"pm.test(\"Returned test is new session page\", function () {",
									"    pm.expect(test).to.equal(\"/\" + web_root + \"/newsession.html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/next",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"tests",
								"{{session_token}}",
								"next"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6201eb71-acef-4812-91e9-3e178f8dd997",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/start",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Next Test of Running Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53d9df24-4022-445d-a0d8-a37868284073",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const nextTest = jsonData.next_test;",
									"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
									"const api = test.split(\"/\").filter(part => !!part)[0]",
									"const availableTests = pm.globals.get(\"available_tests\")",
									"",
									"pm.test(\"Returned test is valid test\", function () {",
									"    pm.expect(availableTests).to.have.property(api);",
									"    pm.expect(availableTests[api]).to.contain(test)",
									"});",
									"",
									"",
									"setTimeout(function () {}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/next",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"tests",
								"{{session_token}}",
								"next"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Result",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b78897d4-7a73-4b71-9d9c-2b0462bf6bd3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"test\": \"{{current_test}}\",\n  \"status\": \"OK\",\n  \"message\": null,\n  \"subtests\": [\n    {\n      \"name\": \"Subtest testing feature xy\",\n      \"status\": \"FAIL\",\n      \"message\": \"Error message\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"results",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Next Test of Completed Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39940b83-e8b6-4517-89bc-4f55da00f263",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const nextTest = jsonData.next_test;",
									"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
									"",
									"const web_root = pm.environment.get(\"web_root\");",
									"",
									"pm.test(\"Returned test is new session page\", function () {",
									"    pm.expect(test).to.equal(\"/\" + web_root + \"/finish.html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/next",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"tests",
								"{{session_token}}",
								"next"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean Up",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Session \\w Configuration Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "717e0bf2-6142-4d2f-8baf-2be2a659ee49",
								"exec": [
									"const response = pm.response.json();",
									"const token = response.token;",
									"pm.globals.set(\"session_token\", token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "467070c2-bc4c-4fcb-b484-a018af35d657",
								"exec": [
									"var automaticTimeout = 120000;",
									"var manualTimeout = 1000000;",
									"var specialTimeout = 2000;",
									"",
									"pm.globals.set(\"automatic_timeout\", automaticTimeout);",
									"pm.globals.set(\"manual_timeout\", manualTimeout);",
									"pm.globals.set(\"special_timeout\", specialTimeout);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tests\": {\n        \"include\": {{included_tests}},\n        \"exclude\": {{excluded_tests}}\n    },\n    \"types\": [\n        \"automatic\"\n    ],\n    \"timeouts\": {\n        \"automatic\": 1000\n    },\n    \"labels\": [\"label1\", \"label2\"]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bd34b02-3a95-47f8-b8cc-ab4b9651810f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/start",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pause Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0077388b-101b-4368-82be-04447181a60b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/pause",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}",
								"pause"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Next Test of Aborted Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d147987e-f197-4be1-b3ae-9fe11dab7abc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const nextTest = jsonData.next_test;",
									"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
									"",
									"const web_root = pm.environment.get(\"web_root\");",
									"",
									"pm.test(\"Returned test is new session page\", function () {",
									"    pm.expect(test).to.equal(\"/\" + web_root + \"/pause.html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/next",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"tests",
								"{{session_token}}",
								"next"
							]
						}
					},
					"response": []
				},
				{
					"name": "Stop Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3fc0dd14-42cd-4533-bbe9-6110aee45cbe",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/stop",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}",
								"stop"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Next Test of Aborted Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ef67301-f407-4208-a887-4adf666949d1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const nextTest = jsonData.next_test;",
									"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
									"",
									"const web_root = pm.environment.get(\"web_root\");",
									"",
									"pm.test(\"Returned test is new session page\", function () {",
									"    pm.expect(test).to.equal(\"/\" + web_root + \"/finish.html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/next",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"tests",
								"{{session_token}}",
								"next"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean Up",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Control Session",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b835b80-6bb8-423c-b1c6-423dcb9a8b04",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pause Pending Session",
					"item": [
						{
							"name": "Pause Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2ff6d41-7dae-47fa-b23a-d323c53ceb51",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/pause",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"pause"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b656cc8-c76e-41a7-8a4a-13e41fdb5f45",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is pending\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"pending\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Start Pending Session",
					"item": [
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fb5b679-8a0f-41b9-9b60-ac2530c7e16d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcaf8c07-94dd-4e99-9155-5633617206a4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Status is running\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"running\");",
											"});",
											"",
											"pm.test(\"Start date is set\", function () {",
											"    pm.expect(Date.parse(jsonData.date_started)).to.be.below(Date.now());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Start Running Session",
					"item": [
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1533ffa8-03bf-411e-9eab-94d9a4ab51c8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ef442b3-5569-4dc4-944a-5d52b5a9a6e0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is running\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"running\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pause Running Session",
					"item": [
						{
							"name": "Pause Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18c5411c-bfdf-413b-94c3-e6357a309906",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/pause",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"pause"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b5e8d56-ef8e-44a3-8d20-909b40b35e2f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is paused\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"paused\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pause Paused Session",
					"item": [
						{
							"name": "Pause Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8740779b-c652-45c0-b280-313ec8f8a9d5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/pause",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"pause"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "809c1308-b05e-45b0-9ce1-7d47705c1986",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is paused\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"paused\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Start Paused Session",
					"item": [
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "650a17d1-328d-41ce-a52f-f17b95cf7f28",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "494afd9f-a7ee-4b3f-88b0-ec099d45f980",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is running\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"running\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Stop Running Session",
					"item": [
						{
							"name": "Stop Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ca4807-7b2a-4db8-bd77-f3e0c14a4e0b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/stop",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06cff8a6-7926-4165-bacc-49d9d17ef244",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Status is aborted\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"aborted\");",
											"});",
											"",
											"pm.test(\"Finish date is set\", function () {",
											"    pm.expect(Date.parse(jsonData.date_finished)).to.be.below(Date.now());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Stop Aborted Session",
					"item": [
						{
							"name": "Stop Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62d9bebf-965c-4cab-87f5-5f81cf308514",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/stop",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "787f48cd-e90f-4685-9bfb-205a59809a27",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is aborted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"aborted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ff72465d-dd44-4bcd-83bc-623cf2da54de",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ed1f30ee-3758-40e2-9a42-17d499b130a5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Start Aborted Session",
					"item": [
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "140889f1-3c7e-4e2e-b622-e6f1eccc7603",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54ffe920-9bd4-4309-aada-cfcadb4de7a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is aborted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"aborted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55cd3cc1-961e-4b5f-b646-6a5b45581cf1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "645ace0c-1252-4f24-ba2e-6bf4e2d12f0f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pause Aborted Session",
					"item": [
						{
							"name": "Pause Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "842789f7-4511-4a5c-9794-2ff56ae29c1e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/pause",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"pause"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca1aa680-48b4-46be-a7a8-034e099185d5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is aborted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"aborted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4b9d4032-893d-40d4-983f-ab7c0fe388e7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddf9f9aa-0c75-4311-85c6-2a443333ec27",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup",
					"item": [
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d943149-9b15-4ad1-86a5-6561ff741696",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4797017c-8afd-4b9c-877a-6a3b4412cb1f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7b518596-9060-41df-a33c-e08032179364",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Stop Pending Session",
					"item": [
						{
							"name": "Stop Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd090686-f532-46ba-865d-c041155a06dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/stop",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2029a1da-5c1f-41de-9b05-5d98fac2ce0b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is aborted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"aborted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup",
					"item": [
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acee88dd-a52c-49a3-8bc3-ad4067721c69",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b691361b-81d9-4e8e-a1a6-aeae730af5d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pause Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05e6062e-93ee-43ad-95eb-3848ae23120c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/pause",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"pause"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a9e28cf-fc96-4586-94c7-0128f94c7723",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "687049fb-c2fc-4367-9c4c-05d3c56bd64e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Stop Paused Session Copy",
					"item": [
						{
							"name": "Stop Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02e87bff-1a8a-4058-9932-39861239af48",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/stop",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6746c3fa-9c45-4c00-ab5b-16d0e5b4715f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is aborted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"aborted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "951086f5-da44-4d2a-b85c-ee3f6e349a79",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "826ae5bd-7e4c-4e15-b1f4-e7ef85ea634f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup",
					"item": [
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Session One Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5df6174d-2ccd-48d1-84ef-c1912302f1f0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fb6089bd-7206-45c7-bc19-025d8447ede3",
										"exec": [
											"const availableTests = pm.globals.get(\"available_tests\");",
											"const test = availableTests[Object.keys(availableTests)[0]][0]",
											"",
											"pm.globals.set(\"single_test\", test);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tests\": {\n        \"include\": [\"{{single_test}}\"]\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ee0b35b-de14-4657-b760-1a80e4419773",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Next Test of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eca57cd8-aa6e-4485-9dcf-1667d6b3577b",
										"exec": [
											"const response = pm.response.json();",
											"const nextTest = response.next_test;",
											"pm.globals.set(\"current_test_url\", nextTest);",
											"if (!nextTest) return;",
											"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
											"pm.globals.set(\"current_test\", test);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/next",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}",
										"next"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Result",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"test\": \"{{current_test}}\",\n  \"status\": \"OK\",\n  \"message\": null,\n  \"subtests\": [\n    {\n      \"name\": \"Subtest testing feature xy\",\n      \"status\": \"FAIL\",\n      \"message\": \"Error message\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a259d5d-3224-482d-b0a1-a184353f5e7f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "abd61eb3-5606-487e-bd13-88d643d32107",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Start Completed Session",
					"item": [
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6893f949-e2bd-480d-a7af-abda9cddbe5d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8320dc2d-fb68-497d-8af6-ad0a65670201",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"completed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pause Completed Session",
					"item": [
						{
							"name": "Pause Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66e4ae00-cba8-4755-98cf-76ff3dbec526",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/pause",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"pause"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7d1ab4b-c775-4c5d-a943-f245024d7943",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"completed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Stop Completed Session",
					"item": [
						{
							"name": "Stop Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7814b1b-3180-4650-8f61-f2cce3e9e10b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/stop",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f26cda10-0d88-42e6-8d88-a900476523b2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status is completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal(\"completed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean Up",
					"item": [
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Update and Read Sessions",
			"item": [
				{
					"name": "Create Default",
					"item": [
						{
							"name": "Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1789c23-3db7-4eb6-a154-e41517bead41",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "680e9bb3-d6d3-4c4e-98d4-506abe252bea",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"tests\");",
											"    pm.expect(typeof jsonData.tests).to.equal(\"object\");",
											"    pm.expect(jsonData.tests).to.have.property(\"include\");",
											"    pm.expect(jsonData.tests.include).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData.tests).to.have.property(\"exclude\");",
											"    pm.expect(jsonData.tests.exclude).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"types\");",
											"    pm.expect(jsonData.types).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"user_agent\");",
											"    pm.expect(typeof jsonData.user_agent).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"timeouts\");",
											"    pm.expect(typeof jsonData.timeouts).to.equal(\"object\")",
											"    pm.expect(jsonData.timeouts).to.have.property(\"automatic\");",
											"    pm.expect(typeof jsonData.timeouts.automatic).to.equal(\"number\");",
											"    pm.expect(jsonData.timeouts).to.have.property(\"manual\");",
											"    pm.expect(typeof jsonData.timeouts.manual).to.equal(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"browser\");",
											"    pm.expect(typeof jsonData.browser).to.equal(\"object\");",
											"    pm.expect(jsonData.browser).to.have.property(\"name\");",
											"    pm.expect(typeof jsonData.browser.name).to.equal(\"string\");",
											"    pm.expect(jsonData.browser).to.have.property(\"version\");",
											"    pm.expect(typeof jsonData.browser.version).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"reference_tokens\");",
											"    pm.expect(jsonData.reference_tokens).to.be.an.instanceof(Array);",
											"});",
											"",
											"pm.test(\"Configuration is default\", function () {",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"    pm.expect(jsonData.tests.include).to.include(\"/\");",
											"    pm.expect(jsonData.types).to.include(\"automatic\");",
											"    pm.expect(jsonData.types).to.include(\"manual\");",
											"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
											"    pm.expect(jsonData.timeouts.automatic).to.equal(60000);",
											"    pm.expect(jsonData.timeouts.manual).to.equal(300000);",
											"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
											"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
											"    pm.expect(jsonData.is_public).to.equal(false);",
											"    pm.expect(jsonData.reference_tokens).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1583725c-5d1a-45e0-a6d5-79ab857fb620",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(typeof jsonData.status).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"    pm.expect(jsonData).to.have.property(\"date_started\");",
											"    pm.expect(jsonData.date_started).to.satisfy(value => !value || typeof value === \"number\");",
											"    pm.expect(jsonData).to.have.property(\"date_finished\");",
											"    pm.expect(jsonData.date_finished).to.satisfy(value => !value || typeof value === \"number\");",
											"});",
											"",
											"pm.test(\"Session status is pending\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"pending\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1ee3d8d-e921-46d3-ba91-ef30399ee681",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"pm.test(\"All tests are pending tests\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.not.have.lengthOf(0);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(0);",
											"})",
											"",
											"const availableTests = pm.globals.get(\"available_tests\"); ",
											"",
											"pm.test(\"All available tests are part of the session\", function () {",
											"    for (var api of Object.keys(jsonData.pending_tests)) {",
											"        for (var test of jsonData.pending_tests[api]) {",
											"            pm.expect(availableTests[api]).to.include(test);",
											"        }",
											"    }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea69baaf-2d82-40c4-85b5-1606267c7ce8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a4361635-d51f-41e1-97b0-416950c755b3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update With Configuration",
					"item": [
						{
							"name": "Update Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb83bfe6-e593-47a0-a544-2d4b943e20d1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7806213-26f5-4bf8-88d6-2bd553649cc4",
										"exec": [
											"var automaticTimeout = 120000;",
											"var manualTimeout = 1000000;",
											"var specialTimeout = 2000;",
											"",
											"pm.globals.set(\"automatic_timeout\", automaticTimeout);",
											"pm.globals.set(\"manual_timeout\", manualTimeout);",
											"pm.globals.set(\"special_timeout\", specialTimeout);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tests\": {\n        \"include\": {{included_tests}},\n        \"exclude\": {{excluded_tests}}\n    },\n    \"types\": [\n        \"automatic\"\n    ],\n    \"timeouts\": {\n        \"automatic\": {{automatic_timeout}},\n        \"manual\": {{manual_timeout}},\n        \"{{special_timeout_test}}\": {{special_timeout}}\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65ff9a7b-9ac6-4fa5-b6c0-5f5f1bfb8b7c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"tests\");",
											"    pm.expect(typeof jsonData.tests).to.equal(\"object\");",
											"    pm.expect(jsonData.tests).to.have.property(\"include\");",
											"    pm.expect(jsonData.tests.include).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData.tests).to.have.property(\"exclude\");",
											"    pm.expect(jsonData.tests.exclude).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"types\");",
											"    pm.expect(jsonData.types).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"user_agent\");",
											"    pm.expect(typeof jsonData.user_agent).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"timeouts\");",
											"    pm.expect(typeof jsonData.timeouts).to.equal(\"object\")",
											"    pm.expect(jsonData.timeouts).to.have.property(\"automatic\");",
											"    pm.expect(typeof jsonData.timeouts.automatic).to.equal(\"number\");",
											"    pm.expect(jsonData.timeouts).to.have.property(\"manual\");",
											"    pm.expect(typeof jsonData.timeouts.manual).to.equal(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"browser\");",
											"    pm.expect(typeof jsonData.browser).to.equal(\"object\");",
											"    pm.expect(jsonData.browser).to.have.property(\"name\");",
											"    pm.expect(typeof jsonData.browser.name).to.equal(\"string\");",
											"    pm.expect(jsonData.browser).to.have.property(\"version\");",
											"    pm.expect(typeof jsonData.browser.version).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"reference_tokens\");",
											"    pm.expect(jsonData.reference_tokens).to.be.an.instanceof(Array);",
											"});",
											"",
											"var includedTests = JSON.parse(pm.globals.get(\"included_tests\"));",
											"var excludedTests = JSON.parse(pm.globals.get(\"excluded_tests\"));",
											"var automaticTimeout = pm.globals.get(\"automatic_timeout\");",
											"var manualTimeout = pm.globals.get(\"manual_timeout\");",
											"var specialTimeout = pm.globals.get(\"special_timeout\");",
											"var specialTimeoutTest = pm.globals.get(\"special_timeout_test\");",
											"",
											"pm.test(\"Configuration is as specified\", function () {",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"    for (var test of includedTests) {",
											"        pm.expect(jsonData.tests.include).to.include(test);",
											"    }",
											"    for (var test of excludedTests) {",
											"        pm.expect(jsonData.tests.exclude).to.include(test);",
											"    }",
											"    pm.expect(jsonData.types).to.include(\"automatic\");",
											"    pm.expect(jsonData.types).to.not.include(\"manual\");",
											"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
											"    pm.expect(jsonData.timeouts.automatic).to.equal(automaticTimeout);",
											"    pm.expect(jsonData.timeouts.manual).to.equal(manualTimeout);",
											"    pm.expect(jsonData.timeouts[specialTimeoutTest]).to.equal(specialTimeout);",
											"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
											"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
											"    pm.expect(jsonData.is_public).to.equal(false);",
											"    pm.expect(jsonData.reference_tokens).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bc76af2-e58e-41c1-954d-b641daf7b383",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"pm.test(\"All tests are pending tests\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.not.have.lengthOf(0);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(0);",
											"})",
											"",
											"const availableTests = pm.globals.get(\"available_tests\");",
											"const includedTests = pm.globals.get(\"included_tests\");",
											"const excludedTests = pm.globals.get(\"excluded_tests\");",
											"",
											"pm.test(\"Selected subset of tests are part of the session\", function () {",
											"    for (var api of Object.keys(jsonData.pending_tests)) {",
											"        for (var includedTest of includedTests) {",
											"            if (includedTest.split(\"/\").find(part => !!part) === api) {",
											"                var includeRegExp = new RegExp(\"^\" + includedTest, \"i\");",
											"                for (var test of jsonData.pending_tests[api]) {",
											"                    pm.expect(test).to.match(regex);",
											"                }",
											"                break;",
											"            }",
											"        }",
											"        for (var excludedTest of excludedTests) {",
											"            if (excludedTest.split(\"/\").find(part => !!part) === api) {",
											"                var excludeRegExp = new RegExp(\"^\" + excludedTest, \"i\");",
											"                for (var test of jsonData.pending_tests[api]) {",
											"                    pm.expect(test).to.not.match(regex);",
											"                }",
											"                break;",
											"            }",
											"        }",
											"    }",
											"});",
											"",
											"const sessionTests = jsonData.pending_tests;",
											"",
											"pm.globals.set(\"session_tests\", JSON.stringify(sessionTests));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa0c44d-f220-406c-81fd-bc55198b0632",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(typeof jsonData.status).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"    pm.expect(jsonData).to.have.property(\"date_started\");",
											"    pm.expect(jsonData.date_started).to.satisfy(value => !value || typeof value === \"number\");",
											"    pm.expect(jsonData).to.have.property(\"date_finished\");",
											"    pm.expect(jsonData.date_finished).to.satisfy(value => !value || typeof value === \"number\");",
											"});",
											"",
											"pm.test(\"Session status is pending\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"pending\");",
											"})",
											"",
											"pm.test(\"Start and Finish date not set\", function () {",
											"    pm.expect(jsonData.date_started).to.be.null;",
											"    pm.expect(jsonData.date_finished).to.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean Up",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f4764cbd-e62e-4b58-b37a-a8647857a40a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "350f5486-e170-4059-ac35-53ef4c15f6d4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Update Session Labels",
			"item": [
				{
					"name": "Create Session \\w Configuration Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8be599fd-1285-43b5-8800-435b4d6bdf81",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
									"",
									"pm.test(\"Responds with token in JSON format\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(jsonData.token).to.match(tokenRegex);",
									"});",
									"",
									"",
									"const response = pm.response.json();",
									"const token = response.token;",
									"pm.globals.set(\"session_token\", token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e96c14d-6b99-4e2c-9565-ec344e35ecf9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"labels\": [\"label1\", \"label2\"]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Session Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b04fee11-ced2-4efb-adc5-7134307f5d88",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
									"",
									"pm.test(\"JSON structure is as expected\", function () {",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"tests\");",
									"    pm.expect(typeof jsonData.tests).to.equal(\"object\");",
									"    pm.expect(jsonData.tests).to.have.property(\"include\");",
									"    pm.expect(jsonData.tests.include).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData.tests).to.have.property(\"exclude\");",
									"    pm.expect(jsonData.tests.exclude).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"types\");",
									"    pm.expect(jsonData.types).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"user_agent\");",
									"    pm.expect(typeof jsonData.user_agent).to.equal(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"timeouts\");",
									"    pm.expect(typeof jsonData.timeouts).to.equal(\"object\")",
									"    pm.expect(jsonData.timeouts).to.have.property(\"automatic\");",
									"    pm.expect(typeof jsonData.timeouts.automatic).to.equal(\"number\");",
									"    pm.expect(jsonData.timeouts).to.have.property(\"manual\");",
									"    pm.expect(typeof jsonData.timeouts.manual).to.equal(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"browser\");",
									"    pm.expect(typeof jsonData.browser).to.equal(\"object\");",
									"    pm.expect(jsonData.browser).to.have.property(\"name\");",
									"    pm.expect(typeof jsonData.browser.name).to.equal(\"string\");",
									"    pm.expect(jsonData.browser).to.have.property(\"version\");",
									"    pm.expect(typeof jsonData.browser.version).to.equal(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"reference_tokens\");",
									"    pm.expect(jsonData.reference_tokens).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"labels\");",
									"    pm.expect(jsonData.labels).to.be.an.instanceof(Array);",
									"});",
									"",
									"pm.test(\"Configuration is default\", function () {",
									"    pm.expect(jsonData.token).to.match(tokenRegex);",
									"    pm.expect(jsonData.tests.include).to.include(\"/\");",
									"    pm.expect(jsonData.types).to.include(\"automatic\");",
									"    pm.expect(jsonData.types).to.include(\"manual\");",
									"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
									"    pm.expect(jsonData.timeouts.automatic).to.equal(60000);",
									"    pm.expect(jsonData.timeouts.manual).to.equal(300000);",
									"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
									"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
									"    pm.expect(jsonData.is_public).to.equal(false);",
									"    pm.expect(jsonData.reference_tokens).to.be.empty;",
									"    pm.expect(jsonData.labels).to.include(\"label1\");",
									"    pm.expect(jsonData.labels).to.include(\"label2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Labels Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d1b9ad4-abf5-4145-8731-cdf25ca69631",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"labels\": [\"new\", \"labels\"]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/labels",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}",
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Session Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64c57926-d0ce-4618-9138-2677f28faece",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
									"",
									"pm.test(\"JSON structure is as expected\", function () {",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"tests\");",
									"    pm.expect(typeof jsonData.tests).to.equal(\"object\");",
									"    pm.expect(jsonData.tests).to.have.property(\"include\");",
									"    pm.expect(jsonData.tests.include).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData.tests).to.have.property(\"exclude\");",
									"    pm.expect(jsonData.tests.exclude).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"types\");",
									"    pm.expect(jsonData.types).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"user_agent\");",
									"    pm.expect(typeof jsonData.user_agent).to.equal(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"timeouts\");",
									"    pm.expect(typeof jsonData.timeouts).to.equal(\"object\")",
									"    pm.expect(jsonData.timeouts).to.have.property(\"automatic\");",
									"    pm.expect(typeof jsonData.timeouts.automatic).to.equal(\"number\");",
									"    pm.expect(jsonData.timeouts).to.have.property(\"manual\");",
									"    pm.expect(typeof jsonData.timeouts.manual).to.equal(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"browser\");",
									"    pm.expect(typeof jsonData.browser).to.equal(\"object\");",
									"    pm.expect(jsonData.browser).to.have.property(\"name\");",
									"    pm.expect(typeof jsonData.browser.name).to.equal(\"string\");",
									"    pm.expect(jsonData.browser).to.have.property(\"version\");",
									"    pm.expect(typeof jsonData.browser.version).to.equal(\"string\");",
									"    pm.expect(jsonData).to.have.property(\"reference_tokens\");",
									"    pm.expect(jsonData.reference_tokens).to.be.an.instanceof(Array);",
									"    pm.expect(jsonData).to.have.property(\"labels\");",
									"    pm.expect(jsonData.labels).to.be.an.instanceof(Array);",
									"});",
									"",
									"pm.test(\"Configuration is default\", function () {",
									"    pm.expect(jsonData.token).to.match(tokenRegex);",
									"    pm.expect(jsonData.tests.include).to.include(\"/\");",
									"    pm.expect(jsonData.types).to.include(\"automatic\");",
									"    pm.expect(jsonData.types).to.include(\"manual\");",
									"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
									"    pm.expect(jsonData.timeouts.automatic).to.equal(60000);",
									"    pm.expect(jsonData.timeouts.manual).to.equal(300000);",
									"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
									"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
									"    pm.expect(jsonData.is_public).to.equal(false);",
									"    pm.expect(jsonData.reference_tokens).to.be.empty;",
									"    pm.expect(jsonData.labels).to.include(\"new\");",
									"    pm.expect(jsonData.labels).to.include(\"labels\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean Up",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete Session",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a53ce081-5b56-4df3-80ce-ea3073a5c51b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b758f269-7ffe-49af-90c9-6b4018f2123e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Session Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c74aee21-9635-425c-aee9-e60d79d13fde",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions",
								"{{session_token}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create and Read Results",
			"item": [
				{
					"name": "Create Session",
					"item": [
						{
							"name": "Create Session Two Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a700772b-19db-4283-ba9d-de44754112b3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff948141-02ea-4083-bf84-403740e58130",
										"exec": [
											"const availableTests = pm.globals.get(\"available_tests\");",
											"const test1 = availableTests[Object.keys(availableTests)[0]][0];",
											"const test2 = availableTests[Object.keys(availableTests)[1]][0];",
											"",
											"pm.globals.set(\"single_test_1\", test1);",
											"pm.globals.set(\"single_test_2\", test2);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tests\": {\n        \"include\": [\"{{single_test_1}}\", \"{{single_test_2}}\"]\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "498e598e-0004-458d-8606-d797a75f66d5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b70f76ff-733a-47eb-bfd4-ce44e19ed6ce",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Responds with no results\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(typeof jsonData).to.equal(\"object\");",
											"    pm.expect(Object.keys(jsonData)).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}"
									],
									"query": [
										{
											"key": "path",
											"value": "/2dcontext/drawing-images-to-the-canvas",
											"disabled": true
										},
										{
											"key": "path",
											"value": "/2dcontext/conformance-requirements",
											"disabled": true
										},
										{
											"key": "path",
											"value": "/2dcontext/conformance-requirements/2d.missingargs.html",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Results Compact",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a43b81c4-ccb1-4f82-90f5-617f1e3f7d90",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var singleTest1 = pm.globals.get(\"single_test_1\");",
											"var singleTest2 = pm.globals.get(\"single_test_2\");",
											"",
											"var api1 = singleTest1.split(\"/\").find(part => !!part);",
											"var api2 = singleTest2.split(\"/\").find(part => !!part);",
											"",
											"pm.test(\"Responds with no results\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(typeof jsonData).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(api1);",
											"    pm.expect(jsonData).to.have.property(api2);",
											"    pm.expect(jsonData[api1].complete).to.equal(0);",
											"    pm.expect(jsonData[api2].complete).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}/compact",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}",
										"compact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Last Completed Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c781a88e-6f1a-40b1-a759-81964cf27c7a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"pm.test(\"JSON format is as expected\", function () {",
											"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(3);",
											"    pm.expect(jsonData).to.have.property(\"pass\");",
											"    pm.expect(jsonData).to.have.property(\"fail\");",
											"    pm.expect(jsonData).to.have.property(\"timeout\");",
											"    for (var key of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[key]).to.be.an.instanceof(Array);",
											"    }",
											"});",
											"",
											"pm.test(\"Responds with no last completed tests\", function () {",
											"    for (var key of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[key]).to.be.empty;",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/last_completed",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}",
										"last_completed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e42a2d1-cc07-4c5e-a365-c161bc5f0b17",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"const sessionTests = jsonData.pending_tests;",
											"",
											"pm.globals.set(\"session_tests\", JSON.stringify(sessionTests));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create First Result",
					"item": [
						{
							"name": "Read Next Test of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd1c5c1a-397b-49a1-a841-b5a165e4c101",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(Object.keys(response)).to.have.lengthOf(1);",
											"    pm.expect(response).to.have.property(\"next_test\");",
											"    pm.expect(typeof response.next_test).to.equal(\"string\");",
											"});",
											"",
											"const nextTest = response.next_test;",
											"pm.globals.set(\"current_test_url\", nextTest);",
											"if (!nextTest) return;",
											"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
											"pm.globals.set(\"current_test\", test);",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"",
											"pm.test(\"Returned test is first of two specified tests\", function () {",
											"    pm.expect(test).to.equal(test1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/next",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}",
										"next"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d21a34cb-8575-4dd9-8932-5fde0761c188",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"pm.test(\"One test is pending, one test is running\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.have.lengthOf(1);",
											"    var api = Object.keys(jsonData.pending_tests)[0];",
											"    pm.expect(jsonData.pending_tests[api]).to.have.lengthOf(1);",
											"    pm.expect(jsonData.pending_tests[api]).to.include(test2);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(1);",
											"    api = Object.keys(jsonData.running_tests)[0];",
											"    pm.expect(jsonData.running_tests[api]).to.have.lengthOf(1);",
											"    pm.expect(jsonData.running_tests[api]).to.include(test1);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9e01368-601c-4200-8125-ac52f578f6d3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"test\": \"{{current_test}}\",\n  \"status\": \"OK\",\n  \"message\": null,\n  \"subtests\": [\n    {\n      \"name\": \"Subtest testing feature xy\",\n      \"status\": \"FAIL\",\n      \"message\": \"Error message\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9aa1a918-55fb-4b2c-b77b-42d22105e22d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"pm.test(\"One test is pending, one test is completed\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.have.lengthOf(1);",
											"    var api = Object.keys(jsonData.pending_tests)[0];",
											"    pm.expect(jsonData.pending_tests[api]).to.have.lengthOf(1);",
											"    pm.expect(jsonData.pending_tests[api]).to.include(test2);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72710d0b-407b-4fa1-818a-2e75483eef05",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(typeof jsonData.status).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"    pm.expect(jsonData).to.have.property(\"date_started\");",
											"    pm.expect(jsonData).to.have.property(\"date_finished\");",
											"});",
											"",
											"pm.test(\"Session status is running\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"running\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Last Completed Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfbe6875-ade1-42b4-8965-b4ed69247085",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"pm.test(\"JSON format is as expected\", function () {",
											"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(3);",
											"    pm.expect(jsonData).to.have.property(\"pass\");",
											"    pm.expect(jsonData).to.have.property(\"fail\");",
											"    pm.expect(jsonData).to.have.property(\"timeout\");",
											"    for (var key of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[key]).to.be.an.instanceof(Array);",
											"    }",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"",
											"pm.test(\"Responds with one last completed tests as failed\", function () {",
											"    pm.expect(jsonData[\"pass\"]).to.be.empty;",
											"    pm.expect(jsonData[\"fail\"]).to.have.lengthOf(1);",
											"    pm.expect(jsonData[\"fail\"][0]).to.equal(test1);",
											"    pm.expect(jsonData[\"timeout\"]).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/last_completed",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}",
										"last_completed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ff472f5-34ff-481c-a86b-a2cdb87517f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON format is as expected\", function () {",
											"    for (var api of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[api]).to.be.an.instanceof(Array);",
											"        for (var result of jsonData[api]) {",
											"            pm.expect(typeof result).to.equal(\"object\");",
											"            pm.expect(Object.keys(result)).to.have.lengthOf(4);",
											"            pm.expect(result).to.have.property(\"test\");",
											"            pm.expect(typeof result.test).to.equal(\"string\");",
											"            pm.expect(result).to.have.property(\"status\");",
											"            pm.expect(typeof result.status).to.equal(\"string\");",
											"            pm.expect(result).to.have.property(\"message\");",
											"            pm.expect(result.message).to.satisfy(message => !message || typeof message === \"string\");",
											"            pm.expect(result).to.have.property(\"subtests\");",
											"            pm.expect(result.subtests).to.be.an.instanceof(Array);",
											"            for (var subtest of result.subtests) {",
											"                pm.expect(typeof subtest).to.equal(\"object\");",
											"                pm.expect(Object.keys(subtest)).to.have.lengthOf(3);",
											"                pm.expect(subtest).to.have.property(\"name\");",
											"                pm.expect(typeof subtest.name).to.equal(\"string\");",
											"                pm.expect(subtest).to.have.property(\"status\");",
											"                pm.expect(typeof subtest.status).to.equal(\"string\");",
											"                pm.expect(subtest).to.have.property(\"message\");",
											"                pm.expect(subtest.message).to.satisfy(message => !message || typeof message === \"string\");",
											"            }",
											"        }",
											"    }",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"",
											"pm.test(\"Test is first test, successful run and failed\", function () {",
											"    var api = Object.keys(jsonData)[0];",
											"    pm.expect(api).to.equal(test1.split(\"/\").find(part => !!part))",
											"    var result = jsonData[api][0];",
											"    pm.expect(result.test).to.equal(test1);",
											"    pm.expect(result.status).to.equal(\"OK\");",
											"    pm.expect(result.message).to.be.null;",
											"    var subtest = result.subtests[0];",
											"    pm.expect(subtest.status).to.equal(\"FAIL\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}"
									],
									"query": [
										{
											"key": "path",
											"value": "/2dcontext/drawing-images-to-the-canvas",
											"disabled": true
										},
										{
											"key": "path",
											"value": "/2dcontext/conformance-requirements",
											"disabled": true
										},
										{
											"key": "path",
											"value": "/2dcontext/conformance-requirements/2d.missingargs.html",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Results Compact",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f8eea9a-a85a-40f1-8f17-0650733112c2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(typeof jsonData).to.equal(\"object\");",
											"    for (var api of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[api]).to.have.property(\"pass\");",
											"        pm.expect(typeof jsonData[api].pass).to.equal(\"number\");",
											"        pm.expect(jsonData[api]).to.have.property(\"fail\");",
											"        pm.expect(typeof jsonData[api].fail).to.equal(\"number\");",
											"        pm.expect(jsonData[api]).to.have.property(\"timeout\");",
											"        pm.expect(typeof jsonData[api].timeout).to.equal(\"number\");",
											"        pm.expect(jsonData[api]).to.have.property(\"not_run\");",
											"        pm.expect(typeof jsonData[api].not_run).to.equal(\"number\");",
											"    }",
											"})",
											"",
											"pm.test(\"Responds with one test failed\", function () {",
											"    var api = Object.keys(jsonData)[0];",
											"    pm.expect(jsonData[api].pass).to.equal(0);",
											"    pm.expect(jsonData[api].fail).to.equal(1);",
											"    pm.expect(jsonData[api].timeout).to.equal(0);",
											"    pm.expect(jsonData[api].not_run).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}/compact",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}",
										"compact"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Last Result",
					"item": [
						{
							"name": "Read Next Test of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff954a0d-544c-44ce-b69f-b8e1747bc484",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(Object.keys(response)).to.have.lengthOf(1);",
											"    pm.expect(response).to.have.property(\"next_test\");",
											"    pm.expect(typeof response.next_test).to.equal(\"string\");",
											"});",
											"",
											"const nextTest = response.next_test;",
											"pm.globals.set(\"current_test_url\", nextTest);",
											"if (!nextTest) return;",
											"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
											"pm.globals.set(\"current_test\", test);",
											"",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"pm.test(\"Returned test is second of two specified tests\", function () {",
											"    pm.expect(test).to.equal(test2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/next",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}",
										"next"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bc87476-7e15-4c6f-9664-af792a017956",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"pm.test(\"One test is running\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.have.lengthOf(0);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(1);",
											"    var api = Object.keys(jsonData.running_tests)[0];",
											"    pm.expect(jsonData.running_tests[api]).to.have.lengthOf(1);",
											"    pm.expect(jsonData.running_tests[api]).to.include(test2);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e6347dc-ce36-4ccc-9f52-011ce8c1ba75",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"test\": \"{{current_test}}\",\n  \"status\": \"OK\",\n  \"message\": null,\n  \"subtests\": [\n    {\n      \"name\": \"Subtest testing feature xy\",\n      \"status\": \"PASS\",\n      \"message\": \"Error message\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "554b1783-4ce0-4f9e-97a6-72996504666d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(typeof jsonData.status).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"    pm.expect(jsonData).to.have.property(\"date_started\");",
											"    pm.expect(jsonData).to.have.property(\"date_finished\");",
											"});",
											"",
											"pm.test(\"Session status is completed\", function () {",
											"    pm.expect(jsonData.status).to.equal(\"completed\");",
											"})",
											"",
											"pm.test(\"Finish date is set\", function () {",
											"    pm.expect(Date.parse(jsonData.date_finished)).to.be.below(Date.now());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7a1f9a0-3c4e-4a05-946b-9d285d9fcd16",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
											"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"running_tests\");",
											"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"var test1Api = test1.split(\"/\").find(part => !!part);",
											"var test2Api = test1.split(\"/\").find(part => !!part);",
											"",
											"pm.test(\"One test is pending, one test is completed\", function () {",
											"    pm.expect(Object.keys(jsonData.pending_tests)).to.have.lengthOf(0);",
											"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Last Completed Tests of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45ccffde-8d33-444f-84c6-a0444c245dbb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"pm.test(\"JSON format is as expected\", function () {",
											"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(3);",
											"    pm.expect(jsonData).to.have.property(\"pass\");",
											"    pm.expect(jsonData).to.have.property(\"fail\");",
											"    pm.expect(jsonData).to.have.property(\"timeout\");",
											"    for (var key of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[key]).to.be.an.instanceof(Array);",
											"    }",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"pm.test(\"Responds with one last completed tests as failed and one last completed test as passed\", function () {",
											"    pm.expect(jsonData[\"pass\"]).to.have.lengthOf(1);",
											"    pm.expect(jsonData[\"pass\"][0]).to.equal(test2);",
											"    pm.expect(jsonData[\"fail\"]).to.have.lengthOf(1);",
											"    pm.expect(jsonData[\"fail\"][0]).to.equal(test1);",
											"    pm.expect(jsonData[\"timeout\"]).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/last_completed",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}",
										"last_completed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a809290-ec8a-4fef-b57f-2561a51b0477",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON format is as expected\", function () {",
											"    for (var api of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[api]).to.be.an.instanceof(Array);",
											"        for (var result of jsonData[api]) {",
											"            pm.expect(typeof result).to.equal(\"object\");",
											"            pm.expect(Object.keys(result)).to.have.lengthOf(4);",
											"            pm.expect(result).to.have.property(\"test\");",
											"            pm.expect(typeof result.test).to.equal(\"string\");",
											"            pm.expect(result).to.have.property(\"status\");",
											"            pm.expect(typeof result.status).to.equal(\"string\");",
											"            pm.expect(result).to.have.property(\"message\");",
											"            pm.expect(result.message).to.satisfy(message => !message || typeof message === \"string\");",
											"            pm.expect(result).to.have.property(\"subtests\");",
											"            pm.expect(result.subtests).to.be.an.instanceof(Array);",
											"            for (var subtest of result.subtests) {",
											"                pm.expect(typeof subtest).to.equal(\"object\");",
											"                pm.expect(Object.keys(subtest)).to.have.lengthOf(3);",
											"                pm.expect(subtest).to.have.property(\"name\");",
											"                pm.expect(typeof subtest.name).to.equal(\"string\");",
											"                pm.expect(subtest).to.have.property(\"status\");",
											"                pm.expect(typeof subtest.status).to.equal(\"string\");",
											"                pm.expect(subtest).to.have.property(\"message\");",
											"                pm.expect(subtest.message).to.satisfy(message => !message || typeof message === \"string\");",
											"            }",
											"        }",
											"    }",
											"});",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"pm.test(\"Test is first and second test, successful run and failed, and successful run and passed\", function () {",
											"    var api = Object.keys(jsonData)[0];",
											"    for (var result of jsonData[api]) {",
											"        if (result.test === test1) {",
											"            pm.expect(result.test).to.equal(test1); ",
											"            pm.expect(result.status).to.equal(\"OK\");",
											"            pm.expect(result.message).to.be.null;",
											"            var subtest = result.subtests[0];",
											"            pm.expect(subtest.status).to.equal(\"FAIL\");",
											"        } else {",
											"            pm.expect(result.test).to.equal(test2); ",
											"            pm.expect(result.status).to.equal(\"OK\");",
											"            pm.expect(result.message).to.be.null;",
											"            subtest = result.subtests[0];",
											"            pm.expect(subtest.status).to.equal(\"PASS\");",
											"        }",
											"    }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}"
									],
									"query": [
										{
											"key": "path",
											"value": "/2dcontext/drawing-images-to-the-canvas",
											"disabled": true
										},
										{
											"key": "path",
											"value": "/2dcontext/conformance-requirements",
											"disabled": true
										},
										{
											"key": "path",
											"value": "/2dcontext/conformance-requirements/2d.missingargs.html",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Results Compact",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3339ba5f-fffb-4dc9-a428-04af18cce577",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(typeof jsonData).to.equal(\"object\");",
											"    for (var api of Object.keys(jsonData)) {",
											"        pm.expect(jsonData[api]).to.have.property(\"pass\");",
											"        pm.expect(typeof jsonData[api].pass).to.equal(\"number\");",
											"        pm.expect(jsonData[api]).to.have.property(\"fail\");",
											"        pm.expect(typeof jsonData[api].fail).to.equal(\"number\");",
											"        pm.expect(jsonData[api]).to.have.property(\"timeout\");",
											"        pm.expect(typeof jsonData[api].timeout).to.equal(\"number\");",
											"        pm.expect(jsonData[api]).to.have.property(\"not_run\");",
											"        pm.expect(typeof jsonData[api].not_run).to.equal(\"number\");",
											"    }",
											"})",
											"",
											"const test1 = pm.globals.get(\"single_test_1\");",
											"const test2 = pm.globals.get(\"single_test_2\");",
											"",
											"var test1Api = test1.split(\"/\").find(part => !!part);",
											"var test2Api = test1.split(\"/\").find(part => !!part);",
											"",
											"pm.test(\"Responds with one test failed\", function () {",
											"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(2);",
											"    var api = Object.keys(jsonData)[0];",
											"    if (api === test1Api) {",
											"        pm.expect(jsonData[api].pass).to.equal(0);",
											"        pm.expect(jsonData[api].fail).to.equal(1);",
											"    } else {",
											"        pm.expect(jsonData[api].pass).to.equal(1);",
											"        pm.expect(jsonData[api].fail).to.equal(0);",
											"    }",
											"    pm.expect(jsonData[api].timeout).to.equal(0);",
											"    pm.expect(jsonData[api].not_run).to.equal(0);",
											"    api = Object.keys(jsonData)[1];",
											"    if (api === test1Api) {",
											"        pm.expect(jsonData[api].pass).to.equal(0);",
											"        pm.expect(jsonData[api].fail).to.equal(1);",
											"    } else {",
											"        pm.expect(jsonData[api].pass).to.equal(1);",
											"        pm.expect(jsonData[api].fail).to.equal(0);",
											"    }",
											"    pm.expect(jsonData[api].timeout).to.equal(0);",
											"    pm.expect(jsonData[api].not_run).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}/compact",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}",
										"compact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Next Test of Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce31ebb7-bdeb-4862-afcd-0e09544ae28d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(Object.keys(response)).to.have.lengthOf(1);",
											"    pm.expect(response).to.have.property(\"next_test\");",
											"    pm.expect(typeof response.next_test).to.equal(\"string\");",
											"});",
											"",
											"const nextTest = response.next_test;",
											"pm.globals.set(\"current_test_url\", nextTest);",
											"if (!nextTest) return;",
											"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
											"pm.globals.set(\"current_test\", test);",
											"",
											"const web_root = pm.environment.get(\"web_root\");",
											"",
											"pm.test(\"Returned test finish page\", function () {",
											"    pm.expect(test).to.equal(\"/\" + web_root + \"/finish.html\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/next",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"tests",
										"{{session_token}}",
										"next"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean Up",
					"item": [
						{
							"name": "Delete Session",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Viewing and Downloading Reports",
			"item": [
				{
					"name": "Create Sessions",
					"item": [
						{
							"name": "First Session",
							"item": [
								{
									"name": "Create Session One Tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1715f3b4-e74c-4eda-b2a9-eafa9eb25c54",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const response = pm.response.json();",
													"const token = response.token;",
													"pm.globals.set(\"session_token\", token);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7cd96b0c-dc39-4068-bf08-ff0f399405ae",
												"exec": [
													"const availableTests = pm.globals.get(\"available_tests\");",
													"const test1 = availableTests[Object.keys(availableTests)[0]][0];",
													"const test2 = availableTests[Object.keys(availableTests)[0]][1];",
													"const apiName = test1.split(\"/\").filter(part => !!part)[0];",
													"",
													"pm.globals.set(\"single_test_1\", test1);",
													"pm.globals.set(\"single_test_2\", test2);",
													"pm.globals.set(\"api_name\", apiName);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tests\": {\n        \"include\": [\"{{single_test_1}}\"]\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Start Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3f455ba-e239-499b-b70e-d24480fe7f1c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/start",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token}}",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Next Test of Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "741d77e0-2d25-4912-bed7-552324c03674",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const response = pm.response.json();",
													"",
													"const nextTest = response.next_test;",
													"pm.globals.set(\"current_test_url\", nextTest);",
													"if (!nextTest) return;",
													"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
													"pm.globals.set(\"current_test\", test);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/next",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"tests",
												"{{session_token}}",
												"next"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93eb3a02-4d4b-40a5-a118-e733c41b74c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"test\": \"{{current_test}}\",\n  \"status\": \"OK\",\n  \"message\": null,\n  \"subtests\": [\n    {\n      \"name\": \"Subtest testing feature xy\",\n      \"status\": \"FAIL\",\n      \"message\": \"Error message\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"results",
												"{{session_token}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Second Session",
							"item": [
								{
									"name": "Create Session One Tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "123e5d1e-6208-4191-97c9-63096b24d1f0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const response = pm.response.json();",
													"const token = response.token;",
													"pm.globals.set(\"session_token_comp\", token);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "88b20e22-2ec3-4325-a7c0-270dfbcf85f9",
												"exec": [
													"const availableTests = pm.globals.get(\"available_tests\");",
													"const test1 = availableTests[Object.keys(availableTests)[0]][0];",
													"const test2 = availableTests[Object.keys(availableTests)[0]][1];",
													"",
													"pm.globals.set(\"single_test_1\", test1);",
													"pm.globals.set(\"single_test_2\", test2);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tests\": {\n        \"include\": [\"{{single_test_1}}\"]\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Start Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4af111d-341e-492f-aa68-9780295f76ad",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token_comp}}/start",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token_comp}}",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Next Test of Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "398f63ac-c452-4871-8319-3b7b2fb8cd51",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const response = pm.response.json();",
													"",
													"const nextTest = response.next_test;",
													"pm.globals.set(\"current_test_url\", nextTest);",
													"if (!nextTest) return;",
													"const test = \"/\" + nextTest.split(\"/\").slice(3).join(\"/\").split(\"?\")[0];",
													"pm.globals.set(\"current_test\", test);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token_comp}}/next",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"tests",
												"{{session_token_comp}}",
												"next"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3566c63e-a4b0-4fd0-9c5a-7b3bd8fe400e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"test\": \"{{current_test}}\",\n  \"status\": \"OK\",\n  \"message\": null,\n  \"subtests\": [\n    {\n      \"name\": \"Subtest testing feature xy\",\n      \"status\": \"FAIL\",\n      \"message\": \"Error message\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token_comp}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"results",
												"{{session_token_comp}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Download reports",
					"item": [
						{
							"name": "Download Results Overview",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff7a14ed-a184-4598-92d5-e61d8d989e56",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}/overview",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}",
										"overview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download All Apis Json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "766f8d7d-cbff-4268-ab4d-eb3d45550545",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}/json",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}",
										"json"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download WPT Multi Report Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9454a0a3-e284-4bbb-a3ac-6cffe33811cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Uri returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(typeof jsonData.uri).to.equal(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{api_name}}/reporturl?tokens={{session_token}},{{session_token_comp}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{api_name}}",
										"reporturl"
									],
									"query": [
										{
											"key": "tokens",
											"value": "{{session_token}},{{session_token_comp}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Results Api Json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f49bde8-de46-47fc-a178-087af0c93c1a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9191df5b-00d3-475c-a6f0-7d3a189a92c3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}/{{api_name}}/json",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}",
										"{{api_name}}",
										"json"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download WPT Report Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f94b8f6-bfc6-4d92-aa97-5f79f18df7f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Uri returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(typeof jsonData.uri).to.equal(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b8d35d1-5cc6-4daa-b138-b371e8bfbd08",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/results/{{session_token}}/{{api_name}}/reporturl",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"results",
										"{{session_token}}",
										"{{api_name}}",
										"reporturl"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Malfunctioning List",
			"item": [
				{
					"name": "Create Session \\w Configuration Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a99608a7-22e7-4fd4-9a5d-0982b1aa6846",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
									"",
									"pm.test(\"Responds with token in JSON format\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(jsonData.token).to.match(tokenRegex);",
									"});",
									"",
									"",
									"const response = pm.response.json();",
									"const token = response.token;",
									"pm.globals.set(\"session_token\", token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0e28cb9-0d89-43e2-a510-92df33c6a4bf",
								"exec": [
									"var automaticTimeout = 120000;",
									"var manualTimeout = 1000000;",
									"var specialTimeout = 2000;",
									"",
									"pm.globals.set(\"automatic_timeout\", automaticTimeout);",
									"pm.globals.set(\"manual_timeout\", manualTimeout);",
									"pm.globals.set(\"special_timeout\", specialTimeout);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tests\": {\n        \"include\": {{included_tests}},\n        \"exclude\": {{excluded_tests}}\n    },\n    \"types\": [\n        \"automatic\"\n    ],\n    \"timeouts\": {\n        \"automatic\": {{automatic_timeout}},\n        \"manual\": {{manual_timeout}},\n        \"{{special_timeout_test}}\": {{special_timeout}}\n    },\n    \"labels\": [\"label1\", \"label2\"]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Session Malfunctioning Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8db4c78-9ffc-401f-ad0d-e51d590fb7ae",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Return empty array\", function() {",
									"    pm.expect(jsonData).to.be.an.instanceof(Array)",
									"    pm.expect(jsonData).to.have.length(0)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/malfunctioning",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"tests",
								"{{session_token}}",
								"malfunctioning"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Session Malfunctioning Insert Two",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18c0b728-d78f-4640-afa1-ec18bc4553df",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t\"/test/file/one.html\",\n\t\"/test/file/two.html\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/malfunctioning",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"tests",
								"{{session_token}}",
								"malfunctioning"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Session Malfunctioning Two Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b15a597-6a77-400a-bac7-e1017722c7c0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Return array with two tests\", function() {",
									"    pm.expect(jsonData).to.be.an.instanceof(Array)",
									"    pm.expect(jsonData).to.have.length(2)",
									"    pm.expect(jsonData).to.include(\"/test/file/one.html\")",
									"    pm.expect(jsonData).to.include(\"/test/file/two.html\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/malfunctioning",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"tests",
								"{{session_token}}",
								"malfunctioning"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Session Malfunctioning Empty Array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48971a7b-928b-4d43-963c-237b0e23ba25",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/malfunctioning",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"tests",
								"{{session_token}}",
								"malfunctioning"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Session Malfunctioning Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f45b2de8-5c74-47c4-8909-b8b69f99537c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Return empty array\", function() {",
									"    pm.expect(jsonData).to.be.an.instanceof(Array)",
									"    pm.expect(jsonData).to.have.length(0)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}/malfunctioning",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{web_root}}",
								"api",
								"tests",
								"{{session_token}}",
								"malfunctioning"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Devices API",
			"item": [
				{
					"name": "create",
					"item": [
						{
							"name": "Create device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57a549f2-1797-4fe4-921a-003d491fd915",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"var response = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(response).to.have.property(\"token\");",
											"});",
											"",
											"pm.test('Data is valid', function() {",
											"  pm.expect(typeof response.token).to.equal(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up: Wait device timeout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a343baa2-2f3e-4a20-b355-9481de665f11",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2abece6a-812c-4203-9d5a-f25de7e71fcd",
										"exec": [
											"var timeout = parseInt(pm.environment.get(\"device_timeout\")) + 500",
											"",
											"setTimeout(function () {}, timeout);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"devices",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "read device",
					"item": [
						{
							"name": "Device not found",
							"item": [
								{
									"name": "Read device",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "114a7b8c-d8f4-4e21-b26e-f70d451f58f3",
												"exec": [
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5085d953-50fe-41dc-ace1-667f18c41d9b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/invalid_token",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"devices",
												"invalid_token"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Device found",
							"item": [
								{
									"name": "Prep: Create device",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66e50894-3a2f-4d2e-bca2-309a7cbb2ce3",
												"exec": [
													"var response = pm.response.json();",
													"var token = response.token;",
													"",
													"pm.globals.set(\"device_token\", token)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"devices",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Read device",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6704b5e4-2658-4487-8f2f-11abd2c523cc",
												"exec": [
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.expect(response).to.have.property(\"token\");",
													"  pm.expect(response).to.have.property(\"user_agent\");",
													"  pm.expect(response).to.have.property(\"last_active\");",
													"  pm.expect(response).to.have.property(\"name\");",
													"});",
													"",
													"pm.test('Data is valid', function() {",
													"  pm.expect(typeof response.token).to.equal(\"string\");",
													"  pm.expect(typeof response.user_agent).to.equal(\"string\");",
													"  pm.expect(typeof response.last_active).to.equal(\"string\");",
													"  pm.expect(typeof response.name).to.equal(\"string\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/{{device_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"devices",
												"{{device_token}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean up: Wait device timeout",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbf41094-0b98-41d7-a1f3-460b8e6e0735",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6adbfa24-0993-48fa-97c4-aa101b424e88",
												"exec": [
													"var timeout = parseInt(pm.environment.get(\"device_timeout\")) + 500",
													"",
													"setTimeout(function () {}, timeout);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"devices",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Timed out device",
							"item": [
								{
									"name": "Prep: Create device",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bc581a6-3a7f-4c4c-9de9-de128b524ee4",
												"exec": [
													"var response = pm.response.json();",
													"var token = response.token;",
													"",
													"pm.globals.set(\"device_token\", token)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"devices",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Wait device timeout",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85d4a8d7-a589-4a28-9639-4624cff599a3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a4b95d71-1fdd-461b-b1fe-ba1f13882f10",
												"exec": [
													"var timeout = parseInt(pm.environment.get(\"device_timeout\")) + 500",
													"",
													"setTimeout(function () {}, timeout);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"devices",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Read device",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c26d6da8-68d0-4d34-9a41-e887318599a1",
												"exec": [
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aad8717c-63b0-4dfc-b755-e8b82bdffb0c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/{{device_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"devices",
												"{{device_token}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "read devices",
					"item": [
						{
							"name": "Prep: Create device A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e14506c-ab26-4bc3-98b6-c317434e93cd",
										"exec": [
											"var response = pm.response.json();",
											"var token = response.token;",
											"",
											"pm.globals.set(\"device_token_a\", token)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Prep: Create device B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c725ba1f-873a-4209-ae97-16415fe1a63f",
										"exec": [
											"var response = pm.response.json();",
											"var token = response.token;",
											"",
											"pm.globals.set(\"device_token_b\", token)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Read devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f01aba20-044b-4d39-b430-9a89c11ece3b",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"var response = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(response).to.be.instanceof(Array);",
											"  response.forEach(element => {",
											"  pm.expect(element).to.have.property(\"token\");",
											"  pm.expect(element).to.have.property(\"user_agent\");",
											"  pm.expect(element).to.have.property(\"last_active\");",
											"  pm.expect(element).to.have.property(\"name\");",
											"  })",
											"});",
											"",
											"pm.test('Data is valid', function() {",
											"  pm.expect(response).to.have.lengthOf(2);",
											"  var devices_left = [",
											"      pm.globals.get(\"device_token_a\"), ",
											"      pm.globals.get(\"device_token_b\")",
											"    ]",
											"  response.forEach(element => {",
											"      pm.expect(typeof element.token).to.equal(\"string\");",
											"      pm.expect(typeof element.user_agent).to.equal(\"string\");",
											"      pm.expect(typeof element.last_active).to.equal(\"string\");",
											"      pm.expect(typeof element.name).to.equal(\"string\");",
											"      pm.expect(devices_left).to.include(element.token);",
											"      devices_left.splice(devices_left.indexOf(element.token), 1);",
											"  })",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up: Wait device timeout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d20aba52-c748-4d14-b537-674ec18bb2f5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aabb9d3f-7f82-45b7-9707-4ea8c7ec4aa6",
										"exec": [
											"var timeout = parseInt(pm.environment.get(\"device_timeout\")) + 500",
											"",
											"setTimeout(function () {}, timeout);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/devices/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"devices",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Sessions API",
			"item": [
				{
					"name": "create session",
					"item": [
						{
							"name": "With Defaults",
							"item": [
								{
									"name": "Prep: Read Available Tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d95f1463-394f-4323-a372-3fa5301396f4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var availableTests = pm.response.json();",
													"",
													"pm.test(\"JSON structure is as expected\", function () {",
													"    pm.expect(typeof availableTests).to.equal(\"object\");",
													"    for (var api of Object.keys(availableTests)) {",
													"        pm.expect(availableTests[api]).to.be.an.instanceof(Array);",
													"        var apiRegExp = new RegExp(\"^/\" + api, \"i\");",
													"        for (var test of availableTests[api]) {",
													"            pm.expect(test).to.match(apiRegExp);",
													"        }",
													"    }",
													"});",
													"",
													"var includedTests = [];",
													"var excludedTests = [];",
													"var specialTimeoutTest = \"\";",
													"",
													"var apis = Object.keys(availableTests);",
													"for(var api of apis) {",
													"    if (availableTests[api].length > 50) {",
													"        var subDirs = availableTests[api].map(test => test.split(\"/\").filter(part => !!part).join(\"/\").split(\"/\")[1]).reduce((acc, curr) => acc.indexOf(curr) === -1 ? acc.concat([curr]) : acc, []);",
													"        if (subDirs.length > 2) {",
													"            includedTests.push(\"/\" + api);",
													"            excludedTests.push(\"/\" + api + \"/\" + subDirs[0]);",
													"            specialTimeoutTest = availableTests[api][availableTests[api].length - 1];",
													"            break;",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"pm.globals.set(\"available_tests\", availableTests);",
													"pm.globals.set(\"included_tests\", JSON.stringify(includedTests));",
													"pm.globals.set(\"excluded_tests\", JSON.stringify(excludedTests));",
													"pm.globals.set(\"special_timeout_test\", specialTimeoutTest.replace(\".\", \"\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"tests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Session No Configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4678eb4-58c5-47a1-b721-90a843835aac",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
													"",
													"pm.test(\"Responds with token in JSON format\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"token\");",
													"    pm.expect(jsonData.token).to.match(tokenRegex);",
													"});",
													"",
													"",
													"const response = pm.response.json();",
													"const token = response.token;",
													"pm.globals.set(\"session_token\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Session Configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bb9d8e2-b22d-4964-8a00-6553df0c2743",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
													"",
													"pm.test(\"Configuration is default\", function () {",
													"    pm.expect(jsonData.token).to.match(tokenRegex);",
													"    pm.expect(jsonData.tests.include).to.include(\"/\");",
													"    pm.expect(jsonData.types).to.include(\"automatic\");",
													"    pm.expect(jsonData.types).to.include(\"manual\");",
													"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
													"    pm.expect(jsonData.timeouts.automatic).to.equal(60000);",
													"    pm.expect(jsonData.timeouts.manual).to.equal(300000);",
													"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
													"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
													"    pm.expect(jsonData.is_public).to.equal(false);",
													"    pm.expect(jsonData.reference_tokens).to.be.empty;",
													"    pm.expect(jsonData.labels).to.be.empty;",
													"    pm.expect(new Date(jsonData.date_created).getTime()).to.be.below(Date.now());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Session Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3afd9f2-dce2-4bd3-be0b-14932ffa2ac8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Session status is pending\", function () {",
													"    pm.expect(jsonData.status).to.equal(\"pending\");",
													"})",
													"",
													"pm.test(\"Start, Finish and Expiration date not set\", function () {",
													"    pm.expect(jsonData.date_started).to.be.null;",
													"    pm.expect(jsonData.date_finished).to.be.null;",
													"    pm.expect(jsonData.expiration_date).to.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tests of Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a347dee-90a4-4e7a-8458-2d6f0bb88d0f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"JSON structure is as expected\", function () {",
													"    pm.expect(jsonData).to.have.property(\"token\");",
													"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
													"    pm.expect(jsonData).to.have.property(\"pending_tests\");",
													"    pm.expect(typeof jsonData.pending_tests).to.equal(\"object\");",
													"    pm.expect(jsonData).to.have.property(\"running_tests\");",
													"    pm.expect(typeof jsonData.running_tests).to.equal(\"object\");",
													"});",
													"",
													"pm.test(\"All tests are pending tests\", function () {",
													"    pm.expect(Object.keys(jsonData.pending_tests)).to.not.have.lengthOf(0);",
													"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(0);",
													"})",
													"",
													"const availableTests = pm.globals.get(\"available_tests\"); ",
													"",
													"pm.test(\"All available tests are part of the session\", function () {",
													"    for (var api of Object.keys(jsonData.pending_tests)) {",
													"        for (var test of jsonData.pending_tests[api]) {",
													"            pm.expect(availableTests[api]).to.include(test);",
													"        }",
													"    }",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"tests",
												"{{session_token}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean up: Delete session",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "910ace90-a9fa-401b-b3b6-4c3b6b69f9cf",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "59ec717c-5e4a-4177-95a9-e2f157c312f4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "With Configuration",
							"item": [
								{
									"name": "Prep: Read Available Tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a64f959-f1eb-4b72-a438-0e1b35d51bfd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var availableTests = pm.response.json();",
													"",
													"pm.test(\"JSON structure is as expected\", function () {",
													"    pm.expect(typeof availableTests).to.equal(\"object\");",
													"    for (var api of Object.keys(availableTests)) {",
													"        pm.expect(availableTests[api]).to.be.an.instanceof(Array);",
													"        var apiRegExp = new RegExp(\"^/\" + api, \"i\");",
													"        for (var test of availableTests[api]) {",
													"            pm.expect(test).to.match(apiRegExp);",
													"        }",
													"    }",
													"});",
													"",
													"var includedTests = [];",
													"var excludedTests = [];",
													"var specialTimeoutTest = \"\";",
													"",
													"var apis = Object.keys(availableTests);",
													"for(var api of apis) {",
													"    if (availableTests[api].length > 50) {",
													"        var subDirs = availableTests[api].map(test => test.split(\"/\").filter(part => !!part).join(\"/\").split(\"/\")[1]).reduce((acc, curr) => acc.indexOf(curr) === -1 ? acc.concat([curr]) : acc, []);",
													"        if (subDirs.length > 2) {",
													"            includedTests.push(\"/\" + api);",
													"            excludedTests.push(\"/\" + api + \"/\" + subDirs[0]);",
													"            specialTimeoutTest = availableTests[api][availableTests[api].length - 1];",
													"            break;",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"pm.globals.set(\"available_tests\", availableTests);",
													"pm.globals.set(\"included_tests\", JSON.stringify(includedTests));",
													"pm.globals.set(\"excluded_tests\", JSON.stringify(excludedTests));",
													"pm.globals.set(\"special_timeout_test\", specialTimeoutTest.replace(\".\", \"\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"tests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Session \\w Configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b2360fc-703d-437e-a493-eff4c8b139cb",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
													"",
													"pm.test(\"Responds with token in JSON format\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"token\");",
													"    pm.expect(jsonData.token).to.match(tokenRegex);",
													"});",
													"",
													"",
													"const response = pm.response.json();",
													"const token = response.token;",
													"pm.globals.set(\"session_token\", token);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1fa6f176-9af6-42da-88c2-1ae9b155c5b0",
												"exec": [
													"var automaticTimeout = 120000;",
													"var manualTimeout = 1000000;",
													"var specialTimeout = 2000;",
													"",
													"pm.globals.set(\"automatic_timeout\", automaticTimeout);",
													"pm.globals.set(\"manual_timeout\", manualTimeout);",
													"pm.globals.set(\"special_timeout\", specialTimeout);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tests\": {\n        \"include\": {{included_tests}},\n        \"exclude\": {{excluded_tests}}\n    },\n    \"types\": [\n        \"automatic\"\n    ],\n    \"timeouts\": {\n        \"automatic\": {{automatic_timeout}},\n        \"manual\": {{manual_timeout}},\n        \"{{special_timeout_test}}\": {{special_timeout}}\n    },\n    \"labels\": [\"label1\", \"label2\"]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Session Configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a41b010c-002d-4de7-84e5-bb99fd888740",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
													"",
													"var includedTests = JSON.parse(pm.globals.get(\"included_tests\"));",
													"var excludedTests = JSON.parse(pm.globals.get(\"excluded_tests\"));",
													"var automaticTimeout = pm.globals.get(\"automatic_timeout\");",
													"var manualTimeout = pm.globals.get(\"manual_timeout\");",
													"var specialTimeout = pm.globals.get(\"special_timeout\");",
													"var specialTimeoutTest = pm.globals.get(\"special_timeout_test\");",
													"",
													"pm.test(\"Configuration is as specified\", function () {",
													"    pm.expect(jsonData.token).to.match(tokenRegex);",
													"    for (var test of includedTests) {",
													"        pm.expect(jsonData.tests.include).to.include(test);",
													"    }",
													"    for (var test of excludedTests) {",
													"        pm.expect(jsonData.tests.exclude).to.include(test);",
													"    }",
													"    pm.expect(jsonData.types).to.include(\"automatic\");",
													"    pm.expect(jsonData.types).to.not.include(\"manual\");",
													"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
													"    pm.expect(jsonData.timeouts.automatic).to.equal(automaticTimeout);",
													"    pm.expect(jsonData.timeouts.manual).to.equal(manualTimeout);",
													"    pm.expect(jsonData.timeouts[specialTimeoutTest]).to.equal(specialTimeout);",
													"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
													"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
													"    pm.expect(jsonData.is_public).to.equal(false);",
													"    pm.expect(jsonData.reference_tokens).to.be.empty;",
													"    pm.expect(jsonData.labels).to.include(\"label1\");",
													"    pm.expect(jsonData.labels).to.include(\"label2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Session Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de5ad7fd-2c28-49ee-95d6-6e3f7037f110",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Session status is pending\", function () {",
													"    pm.expect(jsonData.status).to.equal(\"pending\");",
													"})",
													"",
													"pm.test(\"Start and Finish date not set\", function () {",
													"    pm.expect(jsonData.date_started).to.be.null;",
													"    pm.expect(jsonData.date_finished).to.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tests of Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cccb3992-2b2f-40ce-9144-0fe52e2163b4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"All tests are pending tests\", function () {",
													"    pm.expect(Object.keys(jsonData.pending_tests)).to.not.have.lengthOf(0);",
													"    pm.expect(Object.keys(jsonData.running_tests)).to.have.lengthOf(0);",
													"})",
													"",
													"const availableTests = pm.globals.get(\"available_tests\");",
													"const includedTests = pm.globals.get(\"included_tests\");",
													"const excludedTests = pm.globals.get(\"excluded_tests\");",
													"",
													"pm.test(\"Selected subset of tests are part of the session\", function () {",
													"    for (var api of Object.keys(jsonData.pending_tests)) {",
													"        for (var includedTest of includedTests) {",
													"            if (includedTest.split(\"/\").find(part => !!part) === api) {",
													"                var includeRegExp = new RegExp(\"^\" + includedTest, \"i\");",
													"                for (var test of jsonData.pending_tests[api]) {",
													"                    pm.expect(test).to.match(regex);",
													"                }",
													"                break;",
													"            }",
													"        }",
													"        for (var excludedTest of excludedTests) {",
													"            if (excludedTest.split(\"/\").find(part => !!part) === api) {",
													"                var excludeRegExp = new RegExp(\"^\" + excludedTest, \"i\");",
													"                for (var test of jsonData.pending_tests[api]) {",
													"                    pm.expect(test).to.not.match(regex);",
													"                }",
													"                break;",
													"            }",
													"        }",
													"    }",
													"});",
													"",
													"const sessionTests = jsonData.pending_tests;",
													"",
													"pm.globals.set(\"session_tests\", JSON.stringify(sessionTests));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/tests/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"tests",
												"{{session_token}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean up: Delete session",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d9d5735a-2325-40c3-a844-736032e39ebb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9396d5fb-269f-4608-8c64-c630bd6677dc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "With Expiration",
							"item": [
								{
									"name": "Create Session With Expiration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ef5bc87-1c95-4a19-a764-e7e95890e78d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
													"",
													"pm.test(\"Responds with token in JSON format\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"token\");",
													"    pm.expect(jsonData.token).to.match(tokenRegex);",
													"});",
													"",
													"",
													"const response = pm.response.json();",
													"const token = response.token;",
													"pm.globals.set(\"session_token\", token);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "af1145c9-ac02-48d0-967f-f294bfa1a2cd",
												"exec": [
													"var expirationDate = Date.now() + 3000;",
													"pm.globals.set(\"expiration_date\", expirationDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"expiration_date\": {{expiration_date}}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Expired Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6ad84f2-3551-4c17-86d7-a711e19033f9",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "18849378-dcb9-4fd2-8266-249ecac31a66",
												"exec": [
													"var expirationDate = pm.globals.get(\"expiration_date\");",
													"",
													"var timeout = expirationDate - Date.now() + 1000",
													"",
													"console.log(timeout)",
													"",
													"setTimeout(function () {}, timeout);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean up: Delete session",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "read session",
					"item": [
						{
							"name": "Prep: Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6d32bb3-a17e-41bc-91d9-8de0573042b4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "936e9539-abc4-46e9-aa6b-e432fa304a7f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"tests\");",
											"    pm.expect(typeof jsonData.tests).to.equal(\"object\");",
											"    pm.expect(jsonData.tests).to.have.property(\"include\");",
											"    pm.expect(jsonData.tests.include).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData.tests).to.have.property(\"exclude\");",
											"    pm.expect(jsonData.tests.exclude).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"types\");",
											"    pm.expect(jsonData.types).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"user_agent\");",
											"    pm.expect(typeof jsonData.user_agent).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"timeouts\");",
											"    pm.expect(typeof jsonData.timeouts).to.equal(\"object\")",
											"    pm.expect(jsonData.timeouts).to.have.property(\"automatic\");",
											"    pm.expect(typeof jsonData.timeouts.automatic).to.equal(\"number\");",
											"    pm.expect(jsonData.timeouts).to.have.property(\"manual\");",
											"    pm.expect(typeof jsonData.timeouts.manual).to.equal(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"browser\");",
											"    pm.expect(typeof jsonData.browser).to.equal(\"object\");",
											"    pm.expect(jsonData.browser).to.have.property(\"name\");",
											"    pm.expect(typeof jsonData.browser.name).to.equal(\"string\");",
											"    pm.expect(jsonData.browser).to.have.property(\"version\");",
											"    pm.expect(typeof jsonData.browser.version).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"reference_tokens\");",
											"    pm.expect(jsonData.reference_tokens).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"labels\");",
											"    pm.expect(jsonData.labels).to.be.an.instanceof(Array);",
											"    pm.expect(jsonData).to.have.property(\"date_created\");",
											"});",
											"",
											"pm.test(\"Configuration is default\", function () {",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"    pm.expect(jsonData.tests.include).to.include(\"/\");",
											"    pm.expect(jsonData.types).to.include(\"automatic\");",
											"    pm.expect(jsonData.types).to.include(\"manual\");",
											"    pm.expect(jsonData.user_agent).to.include(\"PostmanRuntime\");",
											"    pm.expect(jsonData.timeouts.automatic).to.equal(60000);",
											"    pm.expect(jsonData.timeouts.manual).to.equal(300000);",
											"    pm.expect(jsonData.browser.name).to.equal(\"Other\");",
											"    pm.expect(jsonData.browser.version).to.equal(\"0\");",
											"    pm.expect(jsonData.is_public).to.equal(false);",
											"    pm.expect(jsonData.reference_tokens).to.be.empty;",
											"    pm.expect(jsonData.labels).to.be.empty;",
											"    pm.expect(new Date(jsonData.date_created).getTime()).to.be.below(Date.now());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up: Delete session",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "read session status",
					"item": [
						{
							"name": "Prep: Create Session No Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d171c3e-68eb-4bb3-b130-c4d274ed596d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const tokenRegex = new RegExp(\"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$\");",
											"",
											"pm.test(\"Responds with token in JSON format\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(jsonData.token).to.match(tokenRegex);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"const token = response.token;",
											"pm.globals.set(\"session_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Session Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa4d59a9-4c5b-4675-afea-90752595c54d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    pm.expect(typeof jsonData.token).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(typeof jsonData.status).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"expiration_date\");",
											"    pm.expect(jsonData.expiration_date).to.be.null;",
											"    pm.expect(jsonData).to.have.property(\"date_started\");",
											"    pm.expect(jsonData).to.have.property(\"date_finished\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up: Delete session",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"sessions",
										"{{session_token}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "read sessions",
					"item": [
						{
							"name": "Without query parameters",
							"item": [
								{
									"name": "Read sessions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee01b848-a66b-412d-8037-c77bcef34448",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"JSON structure as expected\", function() {",
													"    pm.expect(response).to.have.property(\"items\");",
													"    pm.expect(response[\"items\"]).to.be.instanceof(Array);",
													"    pm.expect(response).to.have.property(\"_links\");",
													"    pm.expect(response[\"_links\"]).to.be.instanceof(Object);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/_wave/api/sessions",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"_wave",
												"api",
												"sessions"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Containing created session",
							"item": [
								{
									"name": "Prep: Create session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14aab4cf-cb4c-4a0a-b9a5-ba82bb50808f",
												"exec": [
													"const response = pm.response.json();",
													"const token = response.token;",
													"pm.globals.set(\"session_token\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read sessions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9e4416b-7ce1-4966-a0b0-b6f955cb0668",
												"exec": [
													"const token = pm.globals.get(\"session_token\");",
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"JSON structure as expected\", function() {",
													"    pm.expect(response).to.have.property(\"items\");",
													"    pm.expect(response[\"items\"]).to.be.instanceof(Array);",
													"    pm.expect(response).to.have.property(\"_links\");",
													"    pm.expect(response[\"_links\"]).to.be.instanceof(Object);",
													"});",
													"",
													"pm.test(\"Created session's token in response\", function() {",
													"    pm.expect(response.items).to.contain(token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/_wave/api/sessions?index=0&count=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"_wave",
												"api",
												"sessions"
											],
											"query": [
												{
													"key": "index",
													"value": "0"
												},
												{
													"key": "count",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean up: Delete Session",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "With configuration expansion",
							"item": [
								{
									"name": "Prep: Create session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d29cf7e4-c1d7-4365-bc93-2e3e824549e1",
												"exec": [
													"const response = pm.response.json();",
													"const token = response.token;",
													"pm.globals.set(\"session_token\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read sessions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12cb6c11-80b1-4087-8048-56afa34f4fd9",
												"exec": [
													"const token = pm.globals.get(\"session_token\");",
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"JSON structure as expected\", function() {",
													"    pm.expect(response).to.have.property(\"items\");",
													"    pm.expect(response[\"items\"]).to.be.instanceof(Array);",
													"    pm.expect(response).to.have.property(\"_links\");",
													"    pm.expect(response[\"_links\"]).to.be.instanceof(Object);",
													"    pm.expect(response).to.have.property(\"_embedded\");",
													"    pm.expect(response[\"_embedded\"]).to.be.instanceof(Object);",
													"    pm.expect(response[\"_embedded\"]).to.have.property(\"configuration\");",
													"    pm.expect(response[\"_embedded\"][\"configuration\"]).to.be.instanceof(Array);",
													"});",
													"",
													"pm.test(\"Created session's token in response\", function() {",
													"    pm.expect(response.items).to.contain(token);",
													"});",
													"",
													"pm.test(\"Created session's token in embedded configuration\", function() {",
													"    let tokenInConfigurationList = false;",
													"    let configurations = response._embedded.configuration;",
													"    for (let configuration of configurations) {",
													"        if (configuration.token !== token) continue;",
													"        tokenInConfigurationList = true;",
													"    }",
													"    pm.expect(tokenInConfigurationList).to.equal(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/_wave/api/sessions?index=0&count=1000&expand=configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"_wave",
												"api",
												"sessions"
											],
											"query": [
												{
													"key": "index",
													"value": "0"
												},
												{
													"key": "count",
													"value": "1000"
												},
												{
													"key": "expand",
													"value": "configuration"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean up: Delete Session",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "With status expansion",
							"item": [
								{
									"name": "Prep: Create session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc4d9f4d-32c9-456b-a086-550613e6526e",
												"exec": [
													"const response = pm.response.json();",
													"const token = response.token;",
													"pm.globals.set(\"session_token\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read sessions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67a9d81f-4b59-48bf-8d0d-23354a0918f1",
												"exec": [
													"const token = pm.globals.get(\"session_token\");",
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"JSON structure as expected\", function() {",
													"    pm.expect(response).to.have.property(\"items\");",
													"    pm.expect(response[\"items\"]).to.be.instanceof(Array);",
													"    pm.expect(response).to.have.property(\"_links\");",
													"    pm.expect(response[\"_links\"]).to.be.instanceof(Object);",
													"    pm.expect(response).to.have.property(\"_embedded\");",
													"    pm.expect(response[\"_embedded\"]).to.be.instanceof(Object);",
													"    pm.expect(response[\"_embedded\"]).to.have.property(\"status\");",
													"    pm.expect(response[\"_embedded\"][\"status\"]).to.be.instanceof(Array);",
													"});",
													"",
													"pm.test(\"Created session's token in response\", function() {",
													"    pm.expect(response.items).to.contain(token);",
													"});",
													"",
													"pm.test(\"Created session's token in embedded status\", function() {",
													"    let tokenInStatusList = false;",
													"    let statuses = response._embedded.status;",
													"    for (let status of statuses) {",
													"        if (status.token !== token) continue;",
													"        tokenInStatusList = true;",
													"    }",
													"    pm.expect(tokenInStatusList).to.equal(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/_wave/api/sessions?index=0&count=1000&expand=status",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"_wave",
												"api",
												"sessions"
											],
											"query": [
												{
													"key": "index",
													"value": "0"
												},
												{
													"key": "count",
													"value": "1000"
												},
												{
													"key": "expand",
													"value": "status"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean up: Delete Session",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/sessions/{{session_token}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"{{web_root}}",
												"api",
												"sessions",
												"{{session_token}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "General API",
			"item": [
				{
					"name": "server status",
					"item": [
						{
							"name": "Read server status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37114cde-869f-42c9-b813-139cd7bb385c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"JSON structure is as expected\", function () {",
											"    pm.expect(jsonData).to.have.property(\"import_results_enabled\");",
											"    pm.expect(typeof jsonData.import_results_enabled).to.equal(\"boolean\");",
											"    pm.expect(jsonData).to.have.property(\"reports_enabled\");",
											"    pm.expect(typeof jsonData.reports_enabled).to.equal(\"boolean\");",
											"    pm.expect(jsonData).to.have.property(\"read_sessions_enabled\");",
											"    pm.expect(typeof jsonData.read_sessions_enabled).to.equal(\"boolean\");",
											"    pm.expect(jsonData).to.have.property(\"version_string\");",
											"    pm.expect(typeof jsonData.version_string).to.equal(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"dpctf_version_string\");",
											"    pm.expect(typeof jsonData.version_string).to.equal(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{web_root}}/api/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{web_root}}",
										"api",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}